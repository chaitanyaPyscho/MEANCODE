To access MongoDB using SSH key pairs, you typically use SSH tunneling to securely connect to your MongoDB server. Here's a basic overview along with some advanced topics:

1. **Basic SSH Tunneling**:
   SSH tunneling allows you to securely connect to a remote server. You can use it to forward MongoDB's default port (27017) through an SSH connection.

   ```bash
   ssh -i /path/to/private_key.pem -L 27017:localhost:27017 username@remote_host
   ```

   This command establishes an SSH connection to the remote host, forwarding traffic from local port 27017 to the MongoDB server's port 27017.

2. **Connecting MongoDB Client**:
   Once the SSH tunnel is established, you can connect your MongoDB client to `localhost:27017`, and the traffic will be securely forwarded to the MongoDB server through the SSH tunnel.

   ```bash
   mongo --host localhost:27017 --username <username> --password <password> --authenticationDatabase <auth_database>
   ```

   Replace `<username>`, `<password>`, and `<auth_database>` with your MongoDB credentials and authentication database.

3. **Advanced Topics**:

   - **SSH Configurations**:
     You can configure SSH settings in your SSH config file (`~/.ssh/config`) to simplify SSH connections, define aliases, and specify key files.

     Example SSH config:
     ```
     Host myMongoDBServer
         HostName remote_host
         User username
         IdentityFile /path/to/private_key.pem
     ```

     With this config, you can simply run `ssh myMongoDBServer` to establish the connection.

   - **SSH Agent Forwarding**:
     SSH agent forwarding allows you to use your local SSH keys on the remote server, enabling seamless authentication to other servers from the remote host without storing private keys on the server.

     Enable agent forwarding by adding `-A` option to your SSH command:
     ```bash
     ssh -A -i /path/to/private_key.pem username@remote_host
     ```

   - **SSH Tunneling with Key Pair Authentication**:
     Ensure that the public key corresponding to your private key is added to the `authorized_keys` file on the remote server for key pair authentication.

     You can add the public key to the server's `authorized_keys` file manually or using tools like `ssh-copy-id`.

   - **SSH Hardening**:
     Implement best practices for SSH security, such as disabling root login, using strong passwords or key-based authentication, restricting access by IP, and regularly updating SSH software.

   - **SSH Multiplexing**:
     SSH multiplexing allows multiple SSH sessions to share a single network connection, reducing connection latency and resource usage.

4. **Code Example**:
   Here's a simple Node.js script using `ssh2` module to establish an SSH connection and forward ports:

```javascript
const { Client } = require('ssh2');

const sshConfig = {
    host: 'remote_host',
    port: 22,
    username: 'username',
    privateKey: require('fs').readFileSync('/path/to/private_key.pem')
};

const forwardConfig = {
    srcPort: 27017,
    dstPort: 27017
};

const conn = new Client();

conn.on('ready', () => {
    console.log('SSH connection established.');
    conn.forwardOut(
        '127.0.0.1',
        forwardConfig.srcPort,
        '127.0.0.1',
        forwardConfig.dstPort,
        (err, stream) => {
            if (err) throw err;
            console.log('SSH tunnel established.');
            // Now you can connect to MongoDB using the local port
        }
    );
});

conn.connect(sshConfig);
```

This script establishes an SSH connection to the remote host and forwards local port 27017 to the remote MongoDB server's port 27017. You can then connect to MongoDB on `localhost:27017` securely.