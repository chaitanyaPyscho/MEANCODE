Sure, let's dive deeper into MongoDB joins with more code examples and explanations.

1. **Embedded Documents**:

   ```javascript
   // One-to-One Relationship
   const user = {
       _id: 1,
       username: "user1",
       profile: {
           firstName: "John",
           lastName: "Doe",
           age: 30
       }
   };

   // One-to-Many Relationship
   const author = {
       _id: 1,
       name: "Author1",
       books: [
           { title: "Book1", genre: "Fiction" },
           { title: "Book2", genre: "Non-Fiction" }
       ]
   };
   ```

   In the one-to-one relationship example, the `profile` field is embedded within the `user` document. In the one-to-many relationship example, an array of embedded documents (`books`) is stored within the `author` document.

2. **Referencing Documents**:

   ```javascript
   // Many-to-Many Relationship (Using Referencing)
   const user = {
       _id: 1,
       username: "user1",
       favoriteBooks: [ObjectId("bookId1"), ObjectId("bookId2")]
   };

   const book = {
       _id: ObjectId("bookId1"),
       title: "Book1",
       genre: "Fiction"
   };
   ```

   In this example, the `favoriteBooks` field in the `user` document contains references (ObjectIds) to the favorite books stored in a separate collection.

3. **Populate Method**:

   ```javascript
   // Querying with Populate
   User.findById(userId)
       .populate('favoriteBooks')
       .exec((err, user) => {
           if (err) {
               console.error(err);
               return;
           }
           console.log(user);
       });
   ```

   When querying the `User` collection, you can use the `populate()` method to automatically fetch and populate the referenced documents (`favoriteBooks`) from the `Book` collection.

4. **Aggregation Pipeline**:

   ```javascript
   // Aggregation Pipeline Example
   db.books.aggregate([
       {
           $lookup: {
               from: "authors",
               localField: "authorId",
               foreignField: "_id",
               as: "author"
           }
       },
       {
           $unwind: "$author"
       }
   ]);
   ```

   In this aggregation pipeline, the `$lookup` stage performs a left outer join between the `books` collection and the `authors` collection based on the `authorId` field. The `$unwind` stage is used to deconstruct the resulting array field (`author`).

5. **Output**:

   The output of these operations will vary based on your data and queries. For embedded documents, the output will include the embedded data within the main document. For referenced documents, the output will include the referenced documents either as separate documents or populated within the main document.

By utilizing these techniques, you can effectively model and query relationships in MongoDB, achieving similar results to traditional SQL joins.