Sure, let's break down the basics of Angular forms, including template-driven forms and reactive forms, with examples for each. We'll go through the code line by line to explain each part.

### Template-Driven Forms:

Template-driven forms rely on directives in the template to create and manipulate the underlying form model. Here's a basic example:

```html
<!-- app.component.html -->

<form #myForm="ngForm" (ngSubmit)="onSubmit()">
  <input type="text" name="name" [(ngModel)]="formData.name" required>
  <input type="email" name="email" [(ngModel)]="formData.email" required email>
  
  <button type="submit">Submit</button>
</form>
```

```typescript
// app.component.ts

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  formData = {
    name: '',
    email: ''
  };

  onSubmit() {
    console.log('Form submitted:', this.formData);
  }
}
```

Explanation:
1. In the HTML template, a form element is created with `ngForm` directive, which enables form handling features.
2. Input elements are added for capturing user data. `ngModel` directive is used for two-way data binding to bind form controls to the component's properties.
3. Form validation is applied using HTML5 validation attributes (`required` and `email`).
4. When the form is submitted, the `onSubmit()` method is called.
5. In the component class, `formData` object holds the form data.
6. `onSubmit()` method logs the form data to the console.

### Reactive Forms:

Reactive forms are model-driven and defined programmatically using form control instances. Here's a basic example:

```html
<!-- app.component.html -->

<form [formGroup]="myForm" (ngSubmit)="onSubmit()">
  <input type="text" formControlName="name">
  <input type="email" formControlName="email">
  
  <button type="submit">Submit</button>
</form>
```

```typescript
// app.component.ts

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  myForm: FormGroup;

  constructor(private fb: FormBuilder) {}

  ngOnInit() {
    this.myForm = this.fb.group({
      name: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]]
    });
  }

  onSubmit() {
    console.log('Form submitted:', this.myForm.value);
  }
}
```

Explanation:
1. In the HTML template, the form element is bound to the `myForm` FormGroup using the `formGroup` directive.
2. Input elements are defined with `formControlName`, which associates them with the corresponding controls in the `myForm` FormGroup.
3. Form validation is defined programmatically using Validators from `@angular/forms`.
4. When the form is submitted, the `onSubmit()` method is called.
5. In the component class, `myForm` FormGroup is defined using `FormBuilder`.
6. Form controls are defined with initial values and validators.
7. `onSubmit()` method logs the form data to the console.

Both template-driven and reactive forms offer different approaches to building forms in Angular, each with its advantages and use cases.