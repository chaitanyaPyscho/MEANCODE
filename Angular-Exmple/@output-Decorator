In Angular, the `@Output()` decorator is used to declare an output property in a component. Output properties allow a child component to emit events to its parent component. Here's an example to demonstrate the usage of `@Output()`:

1. **Create a Child Component with Output:**

Let's create a simple child component called `ChildComponent` with an output property called `messageEvent`:

```typescript
// child.component.ts

import { Component, EventEmitter, Output } from '@angular/core';

@Component({
  selector: 'app-child',
  template: `
    <button (click)="sendMessage()">Send Message to Parent</button>
  `
})
export class ChildComponent {
  @Output() messageEvent = new EventEmitter<string>(); // Declare output property

  sendMessage() {
    this.messageEvent.emit('Hello from ChildComponent!');
  }
}
```

In the above code:
- We import `Output` decorator and `EventEmitter` from `@angular/core`.
- We declare an output property called `messageEvent` using `@Output()` decorator, which is an instance of `EventEmitter`.
- Inside the `sendMessage()` method, we emit an event with a message.

2. **Use the Child Component in a Parent Component:**

Now, let's use the `ChildComponent` in a parent component called `ParentComponent`:

```typescript
// parent.component.ts

import { Component } from '@angular/core';

@Component({
  selector: 'app-parent',
  template: `
    <div>
      <app-child (messageEvent)="receiveMessage($event)"></app-child>
      <p>Message received from child: {{ receivedMessage }}</p>
    </div>
  `
})
export class ParentComponent {
  receivedMessage: string;

  receiveMessage(message: string) {
    this.receivedMessage = message;
  }
}
```

In the parent component template:
- We use the `app-child` selector to include the `ChildComponent`.
- We bind to the `messageEvent` output property of `ChildComponent` and listen for events emitted by the child component.
- When the event is emitted, we call the `receiveMessage()` method in the parent component and pass the received message to it.

3. **Register Components:**

Make sure to register both `ChildComponent` and `ParentComponent` in the appropriate module:

```typescript
// app.module.ts

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { ChildComponent } from './child.component';
import { ParentComponent } from './parent.component';

@NgModule({
  imports: [BrowserModule],
  declarations: [ChildComponent, ParentComponent],
  bootstrap: [ParentComponent]
})
export class AppModule { }
```

4. **Use the Parent Component:**

Include the `ParentComponent` selector in the root component's template (e.g., `app.component.html`):

```html
<!-- app.component.html -->

<app-parent></app-parent>
```

Now, when you run your Angular application, the `ParentComponent` will render the `ChildComponent`, and when you click the button in the child component, it will emit an event with the message "Hello from ChildComponent!" to the parent component. The parent component will then receive the message and display it. This demonstrates how `@Output()` allows a child component to emit events to its parent component in Angular.