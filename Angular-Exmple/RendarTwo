Angular's Renderer2 is a service provided by Angular that allows you to manipulate the DOM safely. It provides methods for performing tasks like adding, removing, or manipulating DOM elements and attributes. Renderer2 is preferred over direct DOM manipulation because it ensures compatibility with server-side rendering and allows Angular to optimize rendering in various environments.

Let's create an example where we use Renderer2 to add child content dynamically:

1. **Create Parent Component:**

   ```typescript
   import { Component, ElementRef, Renderer2, ViewChild, AfterViewInit } from '@angular/core';

   @Component({
     selector: 'app-parent',
     template: `
       <div #container></div>
     `
   })
   export class ParentComponent implements AfterViewInit {
     @ViewChild('container') container: ElementRef;

     constructor(private renderer: Renderer2) {}

     ngAfterViewInit() {
       // Add child content dynamically after the view has been initialized
       const childElement = this.renderer.createElement('p');
       const text = this.renderer.createText('This is dynamically added child content');
       this.renderer.appendChild(childElement, text);
       this.renderer.appendChild(this.container.nativeElement, childElement);
     }
   }
   ```

   Explanation:
   - In the `ParentComponent`, we use `Renderer2` to dynamically create a `p` element and add text content to it.
   - We obtain a reference to the container element (`div`) using `ViewChild`.
   - In the `ngAfterViewInit` lifecycle hook, after the view has been initialized, we use Renderer2's `createElement` and `createText` methods to create the element and text node respectively.
   - Finally, we use `appendChild` to append the text node to the `p` element, and then append the `p` element to the container.

2. **App Module:**

   Import and declare the `ParentComponent` in the AppModule.

3. **Usage in Template:**

   Use the `app-parent` selector in any other component's template where you want to display the parent component.

   ```html
   <app-parent></app-parent>
   ```

4. **Result:**

   When the `ParentComponent` is rendered, it dynamically adds a `p` element with the text "This is dynamically added child content" as its child within the `div` container.

This example demonstrates how to use Renderer2 to add child content dynamically to a parent component's template. Renderer2 ensures that DOM manipulation is performed safely within the Angular application, maintaining compatibility with server-side rendering and enabling optimizations.