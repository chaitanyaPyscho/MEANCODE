Certainly! Here are some more examples of middleware usage in Express.js:

### Example 1: Authentication Middleware

```javascript
function authenticate(req, res, next) {
    if (req.isAuthenticated()) {
        return next(); // User is authenticated, proceed to next middleware
    }
    res.status(401).send('Unauthorized'); // Send 401 Unauthorized status
}
```

**Explanation:**
- This middleware checks if the user is authenticated (e.g., using Passport.js).
- If the user is authenticated, it calls the `next()` function to proceed to the next middleware.
- If the user is not authenticated, it sends a 401 Unauthorized response.

### Example 2: Authorization Middleware

```javascript
function authorize(roles) {
    return (req, res, next) => {
        if (!roles.includes(req.user.role)) {
            return res.status(403).send('Forbidden'); // Send 403 Forbidden status
        }
        next(); // User is authorized, proceed to next middleware
    };
}
```

**Explanation:**
- This middleware checks if the user has the required role(s) to access a route.
- It takes an array of roles as input.
- If the user's role matches any of the specified roles, it calls the `next()` function to proceed to the next middleware.
- If the user's role does not match any of the specified roles, it sends a 403 Forbidden response.

### Example 3: Request Logging Middleware

```javascript
function requestLogger(req, res, next) {
    console.log(`${req.method} ${req.url}`);
    next(); // Call the next middleware in the stack
}
```

**Explanation:**
- This middleware logs the HTTP method and URL of every incoming request to the console.
- It can be used for debugging or monitoring purposes to track incoming requests.

### Example 4: Error Handling Middleware

```javascript
function errorHandler(err, req, res, next) {
    console.error(err.stack);
    res.status(500).send('Internal Server Error'); // Send 500 Internal Server Error status
}
```

**Explanation:**
- This middleware catches errors that occur during request processing.
- It takes four parameters `(err, req, res, next)`.
- It logs the error stack trace to the console and sends a generic 500 Internal Server Error response.

### Example 5: Rate Limiting Middleware

```javascript
const rateLimit = require('express-rate-limit');

const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 100 // Limit each IP to 100 requests per windowMs
});

app.use(limiter);
```

**Explanation:**
- This middleware limits the number of requests from each IP address within a specified time window.
- It prevents abuse or excessive usage of your API by imposing rate limits on incoming requests.

These examples demonstrate the versatility of middleware in Express.js and how they can be used for various purposes such as authentication, authorization, logging, error handling, and rate limiting. Depending on the requirements of your application, you can create custom middleware or use existing middleware libraries to enhance the functionality and security of your Express.js application.