Implementing user authentication with Passport.js and role-based access control are essential for securing an Express.js application. Let's go through a basic example demonstrating how to achieve user authentication and authorization using Passport.js with code explanations:

```javascript
const express = require('express');
const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;

const app = express();
const port = 3000;

// Mock user data (replace with database integration in a real application)
const users = [
    { id: 1, username: 'user1', password: 'password1', role: 'user' },
    { id: 2, username: 'admin', password: 'admin123', role: 'admin' }
];

// Passport initialization
app.use(passport.initialize());
app.use(passport.session());

// Passport local strategy for user authentication
passport.use(new LocalStrategy((username, password, done) => {
    const user = users.find(user => user.username === username && user.password === password);
    if (!user) {
        return done(null, false, { message: 'Incorrect username or password' });
    }
    return done(null, user);
}));

// Serialize user for session
passport.serializeUser((user, done) => {
    done(null, user.id);
});

// Deserialize user from session
passport.deserializeUser((id, done) => {
    const user = users.find(user => user.id === id);
    done(null, user);
});

// Route for user login
app.post('/login', passport.authenticate('local'), (req, res) => {
    res.send('Login successful');
});

// Route for accessing protected resource (requires authentication)
app.get('/profile', isAuthenticated, (req, res) => {
    res.send(`Welcome, ${req.user.username}!`);
});

// Middleware to check if user is authenticated
function isAuthenticated(req, res, next) {
    if (req.isAuthenticated()) {
        return next();
    }
    res.status(401).send('Unauthorized');
}

// Route for user logout
app.get('/logout', (req, res) => {
    req.logout();
    res.send('Logout successful');
});

app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});
```

### Step-by-Step Explanation:

1. **Import Necessary Modules:**
   - We import the required modules (`express`, `passport`, and `passport-local`) for setting up authentication and authorization.

2. **Set Up Express App:**
   - We create an instance of the Express application and define the port number.

3. **Passport Initialization:**
   - We initialize Passport.js and enable session support by calling `passport.initialize()` and `passport.session()` middleware.

4. **Passport Local Strategy:**
   - We define a local strategy for authentication using `passport.use(new LocalStrategy(...))`.
   - In the strategy callback, we find the user by username and password from the mock user data. If the user is found, authentication succeeds; otherwise, it fails.

5. **Serialize and Deserialize User:**
   - We define serialization and deserialization functions using `passport.serializeUser()` and `passport.deserializeUser()` to store and retrieve user information in session.

6. **Route for User Login:**
   - We define a route (`/login`) for user login. Passport's `authenticate` middleware is used to authenticate the user using the local strategy.

7. **Route for Accessing Protected Resource:**
   - We define a route (`/profile`) for accessing a protected resource. The `isAuthenticated` middleware is used to ensure the user is authenticated before granting access.

8. **Middleware for User Authentication:**
   - We define a middleware function (`isAuthenticated`) to check if the user is authenticated. If authentication succeeds (`req.isAuthenticated()` returns true), the request proceeds; otherwise, a 401 Unauthorized response is sent.

9. **Route for User Logout:**
   - We define a route (`/logout`) for user logout. Passport's `logout` method is called to log the user out, and a logout message is sent as a response.

### Summary:

- Passport.js is used for user authentication, providing a flexible and modular authentication middleware.
- User credentials are verified using a local strategy, but Passport supports various authentication strategies (e.g., OAuth, OpenID).
- Routes are protected using middleware to check if the user is authenticated, ensuring access control.
- User logout functionality is implemented to invalidate the session and log the user out.

This example demonstrates a basic implementation of user authentication and authorization with Passport.js in an Express.js application. It provides a foundation for building secure web applications with user authentication and role-based access control.