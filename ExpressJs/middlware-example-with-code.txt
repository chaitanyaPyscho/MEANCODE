Certainly! Middleware in Express.js are functions that have access to the request (`req`) and response (`res`) objects. They can modify these objects, execute additional code, or terminate the request-response cycle. Here's a basic example of middleware with a line-by-line explanation:

```javascript
const express = require('express');
const app = express();

// Middleware function
function logger(req, res, next) {
    console.log('Logging...');
    next(); // Call the next middleware in the stack
}

// Use middleware in the application
app.use(logger);

// Route handler
app.get('/', (req, res) => {
    res.send('Hello World!');
});

// Start the server
app.listen(3000, () => {
    console.log('Server is running on port 3000');
});
```

**Explanation:**

1. `const express = require('express');`: Import the Express.js module.

2. `const app = express();`: Create an instance of the Express application.

3. `function logger(req, res, next) { ... }`: Define a middleware function named `logger`. This function takes three parameters: `req` (request), `res` (response), and `next` (a callback function to call the next middleware in the stack). In this example, the middleware simply logs "Logging..." to the console.

4. `app.use(logger);`: Use the `app.use()` method to mount the `logger` middleware in the application. This means that every incoming request will pass through this middleware. The `next()` function is called inside the middleware to proceed to the next middleware in the stack.

5. `app.get('/', (req, res) => { ... });`: Define a route handler for the root path ('/'). This route handler responds with "Hello World!" when a GET request is made to the root path.

6. `app.listen(3000, () => { ... });`: Start the Express server and listen for incoming HTTP requests on port 3000. When the server starts, it logs "Server is running on port 3000" to the console.

In this example, the `logger` middleware logs a message to the console for every incoming request before passing control to the route handler. Middleware functions like `logger` can be used for tasks such as logging, authentication, request parsing, error handling, and more, making them a powerful feature of Express.js.e