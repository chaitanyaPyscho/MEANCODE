Implementing security measures such as Cross-Site Scripting (XSS) protection, Cross-Site Request Forgery (CSRF) protection, and using the Helmet middleware for security headers are crucial steps in securing an Express.js application. Let's go through an example demonstrating how to incorporate these security measures with code explanations:

```javascript
const express = require('express');
const helmet = require('helmet');
const cookieParser = require('cookie-parser');
const csurf = require('csurf');

const app = express();
const port = 3000;

// Middleware for parsing cookies
app.use(cookieParser());

// Helmet middleware for security headers
app.use(helmet());

// CSRF protection middleware
app.use(csurf({ cookie: true }));

// Route for rendering a form with CSRF token
app.get('/form', (req, res) => {
    // Generate CSRF token and render form
    const csrfToken = req.csrfToken();
    res.send(`
        <form action="/submit" method="post">
            <input type="hidden" name="_csrf" value="${csrfToken}">
            <input type="text" name="data">
            <button type="submit">Submit</button>
        </form>
    `);
});

// Route for handling form submission
app.post('/submit', (req, res) => {
    const data = req.body.data;
    res.send(`Submitted data: ${data}`);
});

app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});
```

### Step-by-Step Explanation:

1. **Import Necessary Modules:**
   - We import the required modules (`express`, `helmet`, `cookie-parser`, and `csurf`) for setting up the Express application and implementing security measures.

2. **Set Up Express App:**
   - We create an instance of the Express application and define the port number.

3. **Use Cookie Parser Middleware:**
   - We use the `cookieParser()` middleware to parse cookies from incoming requests automatically.

4. **Helmet Middleware for Security Headers:**
   - We use the Helmet middleware to set various security headers that help protect the application from common web vulnerabilities.

5. **CSRF Protection Middleware:**
   - We use the `csurf` middleware to implement CSRF protection. The `cookie` option is set to true to store the CSRF token in a cookie.

6. **Route for Rendering Form with CSRF Token:**
   - We define a route (`/form`) for rendering a form with a CSRF token embedded as a hidden input field.
   - The CSRF token is generated using `req.csrfToken()` provided by the `csurf` middleware.

7. **Route for Handling Form Submission:**
   - We define a route (`/submit`) for handling form submissions. The route receives data from the form and sends a response with the submitted data.

### Summary:

- Cross-Site Scripting (XSS) protection is provided by default with Express.js.
- Helmet middleware is used to set security headers to enhance application security.
- CSRF protection is implemented using the `csurf` middleware, which generates and validates CSRF tokens for each form submission.
- A CSRF token is embedded in the form rendered to the client, and the token is sent with form submissions to prevent CSRF attacks.

This example demonstrates a basic implementation of security measures such as XSS protection, CSRF protection, and setting security headers using the Helmet middleware in an Express.js application. It's essential to incorporate these security measures to protect against common web vulnerabilities and ensure the security of your application.