Role-based authentication is a crucial aspect of securing applications, as it allows for granular control over access to resources based on user roles. Below is a basic example of implementing role-based authentication in an Express.js application with code explanations:

```javascript
const express = require('express');
const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;

const app = express();
const port = 3000;

// Mock user data (replace with database integration in a real application)
const users = [
    { id: 1, username: 'user1', password: 'password1', role: 'user' },
    { id: 2, username: 'admin', password: 'admin123', role: 'admin' }
];

// Passport initialization
app.use(passport.initialize());
app.use(passport.session());

// Passport local strategy for user authentication
passport.use(new LocalStrategy((username, password, done) => {
    const user = users.find(user => user.username === username && user.password === password);
    if (!user) {
        return done(null, false, { message: 'Incorrect username or password' });
    }
    return done(null, user);
}));

// Serialize user for session
passport.serializeUser((user, done) => {
    done(null, user.id);
});

// Deserialize user from session
passport.deserializeUser((id, done) => {
    const user = users.find(user => user.id === id);
    done(null, user);
});

// Middleware to check if user is authenticated
function isAuthenticated(req, res, next) {
    if (req.isAuthenticated()) {
        return next();
    }
    res.status(401).send('Unauthorized');
}

// Middleware for role-based authorization
function isAuthorized(role) {
    return (req, res, next) => {
        if (req.user && req.user.role === role) {
            return next();
        }
        res.status(403).send('Forbidden');
    };
}

// Route for accessing admin resources
app.get('/admin', isAuthenticated, isAuthorized('admin'), (req, res) => {
    res.send('Admin Dashboard');
});

// Route for accessing user resources
app.get('/user', isAuthenticated, isAuthorized('user'), (req, res) => {
    res.send('User Dashboard');
});

app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});
```

### Step-by-Step Explanation:

1. **Import Necessary Modules:**
   - We import the required modules (`express`, `passport`, and `passport-local`) for setting up authentication and authorization.

2. **Set Up Express App:**
   - We create an instance of the Express application and define the port number.

3. **Passport Initialization:**
   - We initialize Passport.js and enable session support by calling `passport.initialize()` and `passport.session()` middleware.

4. **Passport Local Strategy:**
   - We define a local strategy for authentication using `passport.use(new LocalStrategy(...))`.
   - In the strategy callback, we find the user by username and password from the mock user data. If the user is found, authentication succeeds; otherwise, it fails.

5. **Serialize and Deserialize User:**
   - We define serialization and deserialization functions using `passport.serializeUser()` and `passport.deserializeUser()` to store and retrieve user information in session.

6. **Middleware for User Authentication:**
   - We define a middleware function (`isAuthenticated`) to check if the user is authenticated. If authentication succeeds (`req.isAuthenticated()` returns true), the request proceeds; otherwise, a 401 Unauthorized response is sent.

7. **Middleware for Role-Based Authorization:**
   - We define a middleware function (`isAuthorized`) to check if the authenticated user has the specified role.
   - The middleware checks if `req.user` exists and if its role matches the specified role. If so, the request proceeds; otherwise, a 403 Forbidden response is sent.

8. **Routes for Accessing Resources:**
   - We define routes (`/admin` and `/user`) for accessing admin and user resources, respectively.
   - Each route is protected with the `isAuthenticated` middleware to ensure the user is authenticated before accessing the resources.
   - Additionally, each route is protected with the `isAuthorized` middleware to restrict access based on user roles.

### Summary:

- Role-based authentication allows for fine-grained access control based on user roles.
- Middleware functions are used to check if the user is authenticated (`isAuthenticated`) and if the user has the required role (`isAuthorized`).
- Routes are protected using these middleware functions to ensure that only authenticated users with the appropriate roles can access the resources.

This example demonstrates a basic implementation of role-based authentication in an Express.js application. It provides a foundation for building applications with role-based access control to ensure security and data protection.